


#application.name
#spring:
#  devtools:
#    add-properties: true
#  application:
#    name: gateWay_service
## gateway 配置
#  cloud:
#    gateway:
## 开启网关配
#      routes:
##        路由编号【标识路由名称】
#        - id: path_route
##          路由url最后需要路由的地址
#          uri: http://127.0.0.1:18081
##          路由前缀匹配 【path / method 等】
#          predicates:
##            - Path=/kafka
##            拦截器
##            filters:
##            - StripPrefix=1


spring:
  application:
    name: gateWay_service
  profiles:
    active: T2
#  cloud:
#    # Spring Cloud Gateway 配置项，对应 GatewayProperties 类
#    gateway:
#      # 路由配置项，对应 RouteDefinition 数组
#      routes:
#        - id: path_route # 路由的编号
#          uri: lb://kafka-service # 路由到的目标地址
#          predicates: # 断言，作为路由的匹配条件，对应 RouteDefinition 数组
#            - Path=/kafka/test
#        - id: url-proxy-1
#          uri: https://blog.csdn.net
#          predicates:
#            - Path=/csdn
#      discovery:
#        locator:
#          enabled: true # 是否开启，默认为 false 关闭
#          url-expression: "'lb://' + serviceId" # 路由的目标地址的表达式，默认为 "'lb://' + serviceId"
#          lower-case-service-id: true # 服务名小写
#    # 整合注册中心
#    consul:
#      host: 127.0.0.1
#      port: 8500
#      discovery:
#        ##注册到consul的服务名称
#        service-name: gateWay_service
#        enabled: true
  redis:
    host: 127.0.0.1
    port: 6379
    database: 0
    timeout: 1000
    lettuce:
      pool:
        max-active: 8 #连接池最大连接数（使用负值表示没有限制）
        max-wait: -1 #连接池最大阻塞等待时间（使用负值表示没有限制）
        max-idle: 8  #连接池中的最大空闲连接

#redis 配置
#======================================= 以上放置starter配置 ，以下放置其他配置 =================================================
#日志文件
#logging:
#  config: classpath:logback-spring.xml.demo
logging:
  level:
    org:
      springframework:
        security: DEBUG
#security:
#  oauth2:
#    client:
#      client_id: username
#      client_secret: password
#      registered-redirect-uri: http://localhost:18082/oauth/redirect/url

#
#api:
#  security:
#    oauth2:
#      storeType: redis
#      jwtSignKey: 1234567890
#      clients[0]:
#        clientId: test
#        clientSecret: testsecret
#        accessTokenValiditySeconds: 1800
#      clients[1]:
#        clientId: myid
#        clientSecret: mysecret
server:
  port: 8089
#        accessTokenValiditySeconds: 3600